name: PersonalAgent CI/CD

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]
  release:
    types: [ published ]

jobs:
  security-audit:
    name: Security Audit
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.9'
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
    
    - name: Run security audit
      run: |
        python src/utils/security_audit.py
      continue-on-error: true  # Allow workflow to continue even if security score is not perfect
    
    - name: Upload security report
      uses: actions/upload-artifact@v3
      with:
        name: security-audit-report
        path: security_audit_report.json
        if-no-files-found: ignore

  compatibility-test:
    name: Cross-Platform Compatibility
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ubuntu-latest, macos-latest, windows-latest]
        python-version: ['3.8', '3.9', '3.10', '3.11', '3.12']
        
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v4
      with:
        python-version: ${{ matrix.python-version }}
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
    
    - name: Run compatibility tests
      run: |
        python src/utils/cross_platform_test.py
    
    - name: Upload compatibility report
      uses: actions/upload-artifact@v3
      with:
        name: compatibility-${{ matrix.os }}-py${{ matrix.python-version }}
        path: compatibility_test_report.json
        if-no-files-found: ignore

  code-quality:
    name: Code Quality
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.9'
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install flake8 black isort
    
    - name: Lint with flake8
      run: |
        # stop the build if there are Python syntax errors or undefined names
        flake8 src/ --count --select=E9,F63,F7,F82 --show-source --statistics
        # exit-zero treats all errors as warnings
        flake8 src/ --count --exit-zero --max-complexity=10 --max-line-length=88 --statistics
      continue-on-error: true
    
    - name: Check code formatting with black
      run: |
        black --check src/
      continue-on-error: true
    
    - name: Check import sorting with isort
      run: |
        isort --check-only src/
      continue-on-error: true

  test-core-functionality:
    name: Test Core Functionality
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.9'
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install pytest pytest-cov
    
    - name: Test profile manager
      run: |
        cd src && python -m pytest tests/ -v
      continue-on-error: true  # Tests may require Google Calendar setup
    
    - name: Test secure credentials
      run: |
        python src/utils/secure_credentials.py store TEST_KEY <<< "test_value"
        python src/utils/secure_credentials.py list | grep "TEST_KEY"
        python src/utils/secure_credentials.py delete TEST_KEY
    
    - name: Test basic imports
      run: |
        python -c "
        import sys
        sys.path.insert(0, 'src')
        try:
            import importlib.util
            spec = importlib.util.spec_from_file_location('profileManager', 'src/calendar/profileManager.py')
            profileManager = importlib.util.module_from_spec(spec)
            spec.loader.exec_module(profileManager)
            print('‚úÖ Profile manager import successful')
        except Exception as e:
            print(f'‚ùå Profile manager import failed: {e}')
            sys.exit(1)
        "

  documentation-check:
    name: Documentation Check
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Check documentation files exist
      run: |
        test -f README.md || exit 1
        test -f CHANGELOG.md || exit 1
        test -f CONTRIBUTING.md || exit 1
        test -f LICENSE || exit 1
        test -f V1_0_0_RELEASE_SUMMARY.md || exit 1
        echo "‚úÖ All required documentation files present"
    
    - name: Check for TODO/FIXME in documentation
      run: |
        if grep -r "TODO\|FIXME" *.md docs/ 2>/dev/null; then
          echo "‚ö†Ô∏è Found TODO/FIXME items in documentation"
        else
          echo "‚úÖ No TODO/FIXME items in documentation"
        fi

  deployment-check:
    name: Deployment Readiness
    runs-on: ubuntu-latest
    needs: [security-audit, compatibility-test, code-quality, test-core-functionality, documentation-check]
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Check version consistency
      run: |
        # Check if version is consistent across files
        grep -r "v1.0.0\|1\.0\.0" README.md CHANGELOG.md V1_0_0_RELEASE_SUMMARY.md
        echo "‚úÖ Version consistency check completed"
    
    - name: Validate deployment script
      run: |
        test -f deploy_to_github.sh
        test -x deploy_to_github.sh
        echo "‚úÖ Deployment script is executable"
    
    - name: Check sensitive files are gitignored
      run: |
        if git check-ignore config/credentials.json config/token.json .env; then
          echo "‚úÖ Sensitive files are properly gitignored"
        else
          echo "‚ö†Ô∏è Some sensitive files may not be gitignored"
        fi

  # This job only runs on releases
  release-validation:
    name: Release Validation
    runs-on: ubuntu-latest
    if: github.event_name == 'release'
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Validate release assets
      run: |
        echo "üéâ Release validation for ${{ github.event.release.tag_name }}"
        echo "Release notes length: $(echo '${{ github.event.release.body }}' | wc -c)"
        
    - name: Notify deployment success
      run: |
        echo "‚úÖ PersonalAgent ${{ github.event.release.tag_name }} deployment validated"
        echo "üöÄ Ready for community use!"
