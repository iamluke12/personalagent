#!/bin/bash
# PersonalAgent Setup Script
# Automated installation and configuration

set -e  # Exit on any error

echo "ü§ñ PersonalAgent Setup Script"
echo "================================"

# Check Python version
PYTHON_VERSION=$(python3 --version 2>&1 | cut -d' ' -f2 | cut -d'.' -f1,2)
REQUIRED_VERSION="3.8"

if ! python3 -c "import sys; exit(0 if sys.version_info >= (3, 8) else 1)" 2>/dev/null; then
    echo "‚ùå Python 3.8+ required. Current version: $PYTHON_VERSION"
    echo "Please install Python 3.8 or newer and try again."
    exit 1
fi

echo "‚úÖ Python version check passed ($PYTHON_VERSION)"

# Check if we're in the right directory
if [ ! -f "README.md" ] || [ ! -d "src" ]; then
    echo "‚ùå Please run this script from the PersonalAgent root directory"
    exit 1
fi

echo "‚úÖ Directory structure verified"

# Create virtual environment
echo "üì¶ Creating virtual environment..."
python3 -m venv venv

# Activate virtual environment
echo "üîß Activating virtual environment..."
source venv/bin/activate

# Upgrade pip
echo "‚¨ÜÔ∏è Upgrading pip..."
pip install --upgrade pip

# Install requirements
echo "üìö Installing dependencies..."
pip install -r requirements.txt

# Install additional security packages
echo "üîí Installing security packages..."
pip install cryptography

# Create necessary directories
echo "üìÅ Creating directory structure..."
mkdir -p data/cache
mkdir -p data/logs
mkdir -p config

# Make scripts executable
echo "üîß Setting up executable permissions..."
chmod +x bin/*
chmod +x src/core/getLatest.sh

# Check for Google Calendar credentials
echo "üîê Checking Google Calendar setup..."
if [ ! -f "config/credentials.json" ]; then
    echo "‚ö†Ô∏è Google Calendar credentials not found!"
    echo ""
    echo "To complete setup, you need to:"
    echo "1. Go to https://console.cloud.google.com/"
    echo "2. Create a new project or select existing one"
    echo "3. Enable Google Calendar API"
    echo "4. Create credentials (OAuth 2.0 Client ID)"
    echo "5. Download the credentials.json file"
    echo "6. Place it in the config/ directory"
    echo ""
    echo "For detailed instructions, see: https://developers.google.com/calendar/quickstart/python"
else
    echo "‚úÖ Google Calendar credentials found"
fi

# Check for AI API keys
echo "ü§ñ Checking AI integration setup..."
AI_SETUP=false

if [ -n "$OPENAI_API_KEY" ]; then
    echo "‚úÖ OpenAI API key found in environment"
    AI_SETUP=true
fi

if [ -n "$GEMINI_API_KEY" ]; then
    echo "‚úÖ Gemini API key found in environment"
    AI_SETUP=true
fi

if [ -n "$ANTHROPIC_API_KEY" ]; then
    echo "‚úÖ Anthropic API key found in environment"
    AI_SETUP=true
fi

if [ -n "$OPENROUTER_API_KEY" ]; then
    echo "‚úÖ OpenRouter API key found in environment"
    AI_SETUP=true
fi

if [ "$AI_SETUP" = false ]; then
    echo "‚ö†Ô∏è No AI API keys found in environment"
    echo ""
    echo "AI features are optional but recommended. Set these environment variables:"
    echo "export OPENAI_API_KEY='your_openai_key'"
    echo "export GEMINI_API_KEY='your_gemini_key'"
    echo "export ANTHROPIC_API_KEY='your_claude_key'"
    echo "export OPENROUTER_API_KEY='your_openrouter_key'"
    echo ""
    echo "Add them to your ~/.zshrc or ~/.bashrc for persistence"
    echo ""
    echo "üîí For enhanced security, you can migrate API keys to encrypted storage:"
    echo "python3 src/utils/secure_credentials.py migrate"
fi

# Migrate API keys to secure storage if available
echo "üîí Checking for API key migration..."
if python3 src/utils/secure_credentials.py migrate 2>/dev/null; then
    echo "‚úÖ API keys migrated to secure storage"
else
    echo "‚ÑπÔ∏è No API keys to migrate or migration not needed"
fi

# Setup aliases
echo "üîó Setting up aliases..."
if [ -f "$HOME/.zshrc" ]; then
    if ! grep -q "PersonalAgent System Aliases" "$HOME/.zshrc"; then
        echo "" >> "$HOME/.zshrc"
        echo "# PersonalAgent System Aliases" >> "$HOME/.zshrc"
        echo "# Generated by setup script" >> "$HOME/.zshrc"
        cat zshrc_aliases.txt >> "$HOME/.zshrc"
        echo "‚úÖ Aliases added to ~/.zshrc"
        SHELL_RELOAD_NEEDED=true
    else
        echo "‚ö†Ô∏è Aliases already exist in ~/.zshrc"
    fi
elif [ -f "$HOME/.bashrc" ]; then
    if ! grep -q "PersonalAgent System Aliases" "$HOME/.bashrc"; then
        echo "" >> "$HOME/.bashrc"
        echo "# PersonalAgent System Aliases" >> "$HOME/.bashrc"
        echo "# Generated by setup script" >> "$HOME/.bashrc"
        cat zshrc_aliases.txt >> "$HOME/.bashrc"
        echo "‚úÖ Aliases added to ~/.bashrc"
        SHELL_RELOAD_NEEDED=true
    else
        echo "‚ö†Ô∏è Aliases already exist in ~/.bashrc"
    fi
else
    echo "‚ö†Ô∏è No .zshrc or .bashrc found. Please manually add aliases from zshrc_aliases.txt"
fi

# Test basic functionality
echo "üß™ Testing basic functionality..."
if ./bin/pa-profiles list > /dev/null 2>&1; then
    echo "‚úÖ Profile system working"
else
    echo "‚ö†Ô∏è Profile system test failed (this is normal without Google Calendar setup)"
fi

echo ""
echo "üéâ PersonalAgent setup complete!"
echo ""

# Run security audit
echo "üîí Running security audit..."
if python3 src/utils/security_audit.py --project-root . > /dev/null 2>&1; then
    echo "‚úÖ Security audit passed"
else
    echo "‚ö†Ô∏è Security audit found issues (see: python3 src/utils/security_audit.py)"
fi

# Run cross-platform compatibility test
echo "üåç Running compatibility test..."
if python3 src/utils/cross_platform_test.py --project-root . > /dev/null 2>&1; then
    echo "‚úÖ Platform compatibility verified"
else
    echo "‚ö†Ô∏è Compatibility issues found (see: python3 src/utils/cross_platform_test.py)"
fi

echo ""
echo "Next steps:"
echo "1. Set up Google Calendar credentials (if not done)"
echo "2. Optionally set up AI API keys for enhanced features"
echo "3. Run security audit: python3 src/utils/security_audit.py"
echo "4. Run compatibility test: python3 src/utils/cross_platform_test.py"

if [ "$SHELL_RELOAD_NEEDED" = true ]; then
    echo "3. Reload your shell: source ~/.zshrc (or restart terminal)"
fi

echo ""
echo "Quick start commands:"
echo "  pa-family          # Switch to family profile"
echo "  pa-list today      # List today's activities"
echo "  pa-create          # Create a new task"
echo "  pahelp             # Show detailed help"
echo ""
echo "Documentation: https://github.com/personalagent/personalagent"
echo ""
echo "Happy scheduling! üóìÔ∏è‚ú®"
